// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace dorothea_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
BER(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& yhat,
        const int& Nt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ TN;
            (void) TN;  // dummy to suppress unused var warning
            fun_scalar_t__ FN;
            (void) FN;  // dummy to suppress unused var warning
            fun_scalar_t__ TP;
            (void) TP;  // dummy to suppress unused var warning
            fun_scalar_t__ FP;
            (void) FP;  // dummy to suppress unused var warning
            fun_scalar_t__ BER;
            (void) BER;  // dummy to suppress unused var warning
            fun_scalar_t__ b1;
            (void) b1;  // dummy to suppress unused var warning
            stan::math::initialize(TN, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(FN, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(TP, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(FP, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(BER, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(b1, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 9;
            stan::math::assign(TN, 0.0);
            current_statement_begin__ = 10;
            stan::math::assign(FN, 0.0);
            current_statement_begin__ = 11;
            stan::math::assign(TP, 0.0);
            current_statement_begin__ = 12;
            stan::math::assign(FP, 0.0);
            current_statement_begin__ = 13;
            for (int i = 1; i <= Nt; ++i) {
                current_statement_begin__ = 14;
                if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),0)) && primitive_value(logical_eq(get_base1(y,i,"y",1),0))))) {
                    current_statement_begin__ = 15;
                    stan::math::assign(TN, (TN + 1.0));
                } else if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),0)) && primitive_value(logical_eq(get_base1(y,i,"y",1),1))))) {
                    current_statement_begin__ = 18;
                    stan::math::assign(FN, (FN + 1.0));
                } else if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),1)) && primitive_value(logical_eq(get_base1(y,i,"y",1),1))))) {
                    current_statement_begin__ = 21;
                    stan::math::assign(TP, (TP + 1.0));
                } else if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),1)) && primitive_value(logical_eq(get_base1(y,i,"y",1),0))))) {
                    current_statement_begin__ = 24;
                    stan::math::assign(FP, (FP + 1.0));
                }
            }
            current_statement_begin__ = 27;
            stan::math::assign(BER, (0.5 * ((FP / (FP + TN)) + (FN / (FN + TP)))));
            current_statement_begin__ = 28;
            return stan::math::promote_scalar<fun_return_scalar_t__>(BER);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct BER_functor__ {
    template <typename T0__, typename T1__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& yhat,
        const int& Nt, std::ostream* pstream__) const {
        return BER(y, yhat, Nt, pstream__);
    }
};

class dorothea_model : public prob_grad {
private:
    int N;
    int Ntest;
    int D;
    vector<int> y;
    matrix_d x;
    vector_d ytest;
    matrix_d xtest;
    double lambda;
public:
    dorothea_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "dorothea_model_namespace::dorothea_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Ntest", "int", context__.to_vec());
        Ntest = int(0);
        vals_i__ = context__.vals_i("Ntest");
        pos__ = 0;
        Ntest = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(N,D));
        validate_non_negative_index("x", "N", N);
        validate_non_negative_index("x", "D", D);
        x = matrix_d(N,D);
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_m_mat_lim__ = N;
        size_t x_n_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < x_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x_m_mat_lim__; ++m_mat__) {
                x(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("ytest", "Ntest", Ntest);
        ytest = vector_d(Ntest);
        context__.validate_dims("data initialization", "ytest", "vector_d", context__.to_vec(Ntest));
        vals_r__ = context__.vals_r("ytest");
        pos__ = 0;
        size_t ytest_i_vec_lim__ = Ntest;
        for (size_t i_vec__ = 0; i_vec__ < ytest_i_vec_lim__; ++i_vec__) {
            ytest[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "xtest", "matrix_d", context__.to_vec(Ntest,D));
        validate_non_negative_index("xtest", "Ntest", Ntest);
        validate_non_negative_index("xtest", "D", D);
        xtest = matrix_d(Ntest,D);
        vals_r__ = context__.vals_r("xtest");
        pos__ = 0;
        size_t xtest_m_mat_lim__ = Ntest;
        size_t xtest_n_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < xtest_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < xtest_m_mat_lim__; ++m_mat__) {
                xtest(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "lambda", "double", context__.to_vec());
        lambda = double(0);
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0;
        lambda = vals_r__[pos__++];

        // validate data
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"y[k0__]",y[k0__],0);
            check_less_or_equal(function__,"y[k0__]",y[k0__],1);
        }
        check_greater_or_equal(function__,"ytest",ytest,0);
        check_less_or_equal(function__,"ytest",ytest,1);
        check_greater_or_equal(function__,"lambda",lambda,0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += D;
        ++num_params_r__;
        num_params_r__ += D;
    }

    ~dorothea_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(D));
        vector_d beta(D);
        for (int j1__ = 0U; j1__ < D; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(-(0.5),0.5,beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(alpha);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("sigma")))
            throw std::runtime_error("variable sigma missing");
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma", "vector_d", context__.to_vec(D));
        vector_d sigma(D);
        for (int j1__ = 0U; j1__ < D; ++j1__)
            sigma(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,sigma);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta;
        (void) beta;   // dummy to suppress unused var warning
        if (jacobian__)
            beta = in__.vector_lub_constrain(-(0.5),0.5,D,lp__);
        else
            beta = in__.vector_lub_constrain(-(0.5),0.5,D);

        T__ alpha;
        (void) alpha;   // dummy to suppress unused var warning
        if (jacobian__)
            alpha = in__.scalar_constrain(lp__);
        else
            alpha = in__.scalar_constrain();

        Eigen::Matrix<T__,Eigen::Dynamic,1>  sigma;
        (void) sigma;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma = in__.vector_lb_constrain(0,D,lp__);
        else
            sigma = in__.vector_lb_constrain(0,D);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  zeros(D);
        (void) zeros;  // dummy to suppress unused var warning
        stan::math::fill(zeros,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(zeros,DUMMY_VAR__);

        try {
            current_statement_begin__ = 52;
            for (int i = 1; i <= D; ++i) {
                current_statement_begin__ = 53;
                stan::math::assign(get_base1_lhs(zeros,i,"zeros",1), 0.0);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < D; ++i0__) {
            if (stan::math::is_uninitialized(zeros(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: zeros" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            current_statement_begin__ = 56;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 5));
            current_statement_begin__ = 57;
            lp_accum__.add(inv_gamma_log<propto__>(sigma, 1, 2));
            current_statement_begin__ = 58;
            lp_accum__.add(multi_normal_prec_log<propto__>(beta, zeros, diag_matrix(sigma)));
            current_statement_begin__ = 64;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 65;
                lp_accum__.add(bernoulli_log<propto__>(get_base1(y,n,"y",1), inv_logit((alpha + multiply(get_base1(x,n,"x",1),beta)))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("alpha");
        names__.push_back("sigma");
        names__.push_back("zeros");
        names__.push_back("errors");
        names__.push_back("average_error");
        names__.push_back("log_lik");
        names__.push_back("predictions");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ntest);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Ntest);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "dorothea_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d beta = in__.vector_lub_constrain(-(0.5),0.5,D);
        double alpha = in__.scalar_constrain();
        vector_d sigma = in__.vector_lb_constrain(0,D);
        for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(beta[k_0__]);
        }
        vars__.push_back(alpha);
        for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(sigma[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        vector_d zeros(D);
        (void) zeros;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 52;
            for (int i = 1; i <= D; ++i) {
                current_statement_begin__ = 53;
                stan::math::assign(get_base1_lhs(zeros,i,"zeros",1), 0.0);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(zeros[k_0__]);
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector<double> errors(Ntest, 0.0);
        double average_error(0.0);
        (void) average_error;  // dummy to suppress unused var warning
        vector_d log_lik(N);
        (void) log_lik;  // dummy to suppress unused var warning
        vector_d predictions(Ntest);
        (void) predictions;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(errors,DUMMY_VAR__);
        stan::math::fill(average_error,DUMMY_VAR__);
        stan::math::fill(log_lik,DUMMY_VAR__);
        stan::math::fill(predictions,DUMMY_VAR__);

        try {
            current_statement_begin__ = 73;
            for (int n = 1; n <= Ntest; ++n) {
                current_statement_begin__ = 74;
                stan::math::assign(get_base1_lhs(predictions,n,"predictions",1), inv_logit((alpha + multiply(get_base1(xtest,n,"xtest",1),beta))));
                current_statement_begin__ = 75;
                stan::math::assign(get_base1_lhs(errors,n,"errors",1), fabs((get_base1(ytest,n,"ytest",1) - round(get_base1(predictions,n,"predictions",1)))));
            }
            current_statement_begin__ = 77;
            stan::math::assign(average_error, BER(ytest,predictions,Ntest, pstream__));
            current_statement_begin__ = 79;
            for (int n = 1; n <= N; ++n) {
                current_statement_begin__ = 80;
                stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), bernoulli_logit_log(get_base1(y,n,"y",1),(alpha + multiply(get_base1(x,n,"x",1),beta))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        for (int k0__ = 0; k0__ < Ntest; ++k0__) {
            check_greater_or_equal(function__,"errors[k0__]",errors[k0__],0);
        }
        check_greater_or_equal(function__,"average_error",average_error,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < Ntest; ++k_0__) {
            vars__.push_back(errors[k_0__]);
        }
        vars__.push_back(average_error);
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < Ntest; ++k_0__) {
            vars__.push_back(predictions[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "dorothea_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeros" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Ntest; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "errors" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "average_error";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Ntest; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predictions" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeros" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Ntest; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "errors" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "average_error";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= Ntest; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predictions" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef dorothea_model_namespace::dorothea_model stan_model;

