// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace bnn_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T0__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
scaled_inv_logit(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic>  res(rows(X),cols(X));
            (void) res;  // dummy to suppress unused var warning
            stan::math::initialize(res, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 4;
            for (int i = 1; i <= rows(X); ++i) {
                current_statement_begin__ = 5;
                for (int j = 1; j <= cols(X); ++j) {
                    current_statement_begin__ = 6;
                    stan::math::assign(get_base1_lhs(res,i,j,"res",1), ((inv_logit(get_base1(X,i,j,"X",1)) * 2) - 1));
                }
            }
            current_statement_begin__ = 7;
            return stan::math::promote_scalar<fun_return_scalar_t__>(res);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct scaled_inv_logit_functor__ {
    template <typename T0__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__>::type, Eigen::Dynamic,Eigen::Dynamic>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X, std::ostream* pstream__) const {
        return scaled_inv_logit(X, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
inline
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic,1>
calculate_alpha(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& bias,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& beta_first,
                    const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic> >& beta_middle,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& beta_output, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            int N(0);
            (void) N;  // dummy to suppress unused var warning
            int num_nodes(0);
            (void) num_nodes;  // dummy to suppress unused var warning
            int num_layers(0);
            (void) num_layers;  // dummy to suppress unused var warning
            vector<Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> > layer_values(rows(bias), (Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,Eigen::Dynamic> (rows(X),rows(beta_first))));
            Eigen::Matrix<fun_scalar_t__,Eigen::Dynamic,1>  alpha(rows(X));
            (void) alpha;  // dummy to suppress unused var warning
            stan::math::initialize(layer_values, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(alpha, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 17;
            stan::math::assign(N, rows(X));
            current_statement_begin__ = 18;
            stan::math::assign(num_nodes, rows(beta_first));
            current_statement_begin__ = 19;
            stan::math::assign(num_layers, rows(bias));
            current_statement_begin__ = 21;
            stan::math::assign(get_base1_lhs(layer_values,1,"layer_values",1), scaled_inv_logit(add(get_base1(bias,1,"bias",1),multiply(X,transpose(beta_first))), pstream__));
            current_statement_begin__ = 22;
            for (int i = 2; i <= (num_layers - 1); ++i) {
                current_statement_begin__ = 23;
                stan::math::assign(get_base1_lhs(layer_values,i,"layer_values",1), scaled_inv_logit(add(get_base1(bias,i,"bias",1),multiply(get_base1(layer_values,(i - 1),"layer_values",1),transpose(get_base1(beta_middle,(i - 1),"beta_middle",1)))), pstream__));
            }
            current_statement_begin__ = 24;
            stan::math::assign(alpha, add(get_base1(bias,num_layers,"bias",1),multiply(get_base1(layer_values,(num_layers - 1),"layer_values",1),beta_output)));
            current_statement_begin__ = 25;
            return stan::math::promote_scalar<fun_return_scalar_t__>(alpha);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct calculate_alpha_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
    inline
    Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type, Eigen::Dynamic,1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,Eigen::Dynamic>& X,
                    const Eigen::Matrix<T1__, Eigen::Dynamic,1>& bias,
                    const Eigen::Matrix<T2__, Eigen::Dynamic,Eigen::Dynamic>& beta_first,
                    const std::vector<Eigen::Matrix<T3__, Eigen::Dynamic,Eigen::Dynamic> >& beta_middle,
                    const Eigen::Matrix<T4__, Eigen::Dynamic,1>& beta_output, std::ostream* pstream__) const {
        return calculate_alpha(X, bias, beta_first, beta_middle, beta_output, pstream__);
    }
};

class bnn_model : public prob_grad {
private:
    int N;
    int d;
    int num_nodes;
    int num_middle_layers;
    matrix_d X;
    vector<int> y;
    int Nt;
    matrix_d Xt;
    int num_layers;
public:
    bnn_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "bnn_model_namespace::bnn_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "d", "int", context__.to_vec());
        d = int(0);
        vals_i__ = context__.vals_i("d");
        pos__ = 0;
        d = vals_i__[pos__++];
        context__.validate_dims("data initialization", "num_nodes", "int", context__.to_vec());
        num_nodes = int(0);
        vals_i__ = context__.vals_i("num_nodes");
        pos__ = 0;
        num_nodes = vals_i__[pos__++];
        context__.validate_dims("data initialization", "num_middle_layers", "int", context__.to_vec());
        num_middle_layers = int(0);
        vals_i__ = context__.vals_i("num_middle_layers");
        pos__ = 0;
        num_middle_layers = vals_i__[pos__++];
        context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(N,d));
        validate_non_negative_index("X", "N", N);
        validate_non_negative_index("X", "d", d);
        X = matrix_d(N,d);
        vals_r__ = context__.vals_r("X");
        pos__ = 0;
        size_t X_m_mat_lim__ = N;
        size_t X_n_mat_lim__ = d;
        for (size_t n_mat__ = 0; n_mat__ < X_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < X_m_mat_lim__; ++m_mat__) {
                X(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "y", "int", context__.to_vec(N));
        validate_non_negative_index("y", "N", N);
        y = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "Nt", "int", context__.to_vec());
        Nt = int(0);
        vals_i__ = context__.vals_i("Nt");
        pos__ = 0;
        Nt = vals_i__[pos__++];
        context__.validate_dims("data initialization", "Xt", "matrix_d", context__.to_vec(Nt,d));
        validate_non_negative_index("Xt", "Nt", Nt);
        validate_non_negative_index("Xt", "d", d);
        Xt = matrix_d(Nt,d);
        vals_r__ = context__.vals_r("Xt");
        pos__ = 0;
        size_t Xt_m_mat_lim__ = Nt;
        size_t Xt_n_mat_lim__ = d;
        for (size_t n_mat__ = 0; n_mat__ < Xt_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < Xt_m_mat_lim__; ++m_mat__) {
                Xt(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate data
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"d",d,0);
        check_greater_or_equal(function__,"num_nodes",num_nodes,0);
        check_greater_or_equal(function__,"num_middle_layers",num_middle_layers,1);
        check_greater_or_equal(function__,"Nt",Nt,0);
        num_layers = int(0);

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(num_layers,DUMMY_VAR__);

        try {
            current_statement_begin__ = 40;
            stan::math::assign(num_layers, (num_middle_layers + 2));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += num_layers;
        num_params_r__ += num_nodes * d;
        num_params_r__ += num_nodes * num_nodes * num_middle_layers;
        num_params_r__ += num_nodes;
    }

    ~bnn_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("bias")))
            throw std::runtime_error("variable bias missing");
        vals_r__ = context__.vals_r("bias");
        pos__ = 0U;
        context__.validate_dims("initialization", "bias", "vector_d", context__.to_vec(num_layers));
        vector_d bias(num_layers);
        for (int j1__ = 0U; j1__ < num_layers; ++j1__)
            bias(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(bias);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable bias: ") + e.what());
        }

        if (!(context__.contains_r("beta_first")))
            throw std::runtime_error("variable beta_first missing");
        vals_r__ = context__.vals_r("beta_first");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_first", "matrix_d", context__.to_vec(num_nodes,d));
        matrix_d beta_first(num_nodes,d);
        for (int j2__ = 0U; j2__ < d; ++j2__)
            for (int j1__ = 0U; j1__ < num_nodes; ++j1__)
                beta_first(j1__,j2__) = vals_r__[pos__++];
        try {
            writer__.matrix_unconstrain(beta_first);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_first: ") + e.what());
        }

        if (!(context__.contains_r("beta_middle")))
            throw std::runtime_error("variable beta_middle missing");
        vals_r__ = context__.vals_r("beta_middle");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_middle", "matrix_d", context__.to_vec(num_middle_layers,num_nodes,num_nodes));
        std::vector<matrix_d> beta_middle(num_middle_layers,matrix_d(num_nodes,num_nodes));
        for (int j2__ = 0U; j2__ < num_nodes; ++j2__)
            for (int j1__ = 0U; j1__ < num_nodes; ++j1__)
                for (int i0__ = 0U; i0__ < num_middle_layers; ++i0__)
                    beta_middle[i0__](j1__,j2__) = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < num_middle_layers; ++i0__)
            try {
            writer__.matrix_unconstrain(beta_middle[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_middle: ") + e.what());
        }

        if (!(context__.contains_r("beta_output")))
            throw std::runtime_error("variable beta_output missing");
        vals_r__ = context__.vals_r("beta_output");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_output", "vector_d", context__.to_vec(num_nodes));
        vector_d beta_output(num_nodes);
        for (int j1__ = 0U; j1__ < num_nodes; ++j1__)
            beta_output(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(beta_output);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta_output: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  bias;
        (void) bias;   // dummy to suppress unused var warning
        if (jacobian__)
            bias = in__.vector_constrain(num_layers,lp__);
        else
            bias = in__.vector_constrain(num_layers);

        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  beta_first;
        (void) beta_first;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_first = in__.matrix_constrain(num_nodes,d,lp__);
        else
            beta_first = in__.matrix_constrain(num_nodes,d);

        vector<Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic> > beta_middle;
        size_t dim_beta_middle_0__ = num_middle_layers;
        beta_middle.reserve(dim_beta_middle_0__);
        for (size_t k_0__ = 0; k_0__ < dim_beta_middle_0__; ++k_0__) {
            if (jacobian__)
                beta_middle.push_back(in__.matrix_constrain(num_nodes,num_nodes,lp__));
            else
                beta_middle.push_back(in__.matrix_constrain(num_nodes,num_nodes));
        }

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta_output;
        (void) beta_output;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_output = in__.vector_constrain(num_nodes,lp__);
        else
            beta_output = in__.vector_constrain(num_nodes);


        // transformed parameters

        // initialize transformed variables to avoid seg fault on val access

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  alpha(N);
                (void) alpha;  // dummy to suppress unused var warning
                stan::math::fill(alpha,DUMMY_VAR__);
                stan::math::initialize(alpha, DUMMY_VAR__);
                current_statement_begin__ = 50;
                stan::math::assign(alpha, calculate_alpha(X,bias,beta_first,beta_middle,beta_output, pstream__));
                current_statement_begin__ = 51;
                lp_accum__.add(bernoulli_logit_log<propto__>(y, alpha));
                current_statement_begin__ = 54;
                lp_accum__.add(normal_log<propto__>(bias, 0, 1));
                current_statement_begin__ = 55;
                lp_accum__.add(normal_log<propto__>(to_vector(beta_output), 0, 1));
                current_statement_begin__ = 56;
                lp_accum__.add(normal_log<propto__>(to_vector(beta_first), 0, 1));
                current_statement_begin__ = 57;
                for (int i = 1; i <= num_middle_layers; ++i) {
                    current_statement_begin__ = 58;
                    lp_accum__.add(normal_log<propto__>(to_vector(get_base1(beta_middle,i,"beta_middle",1)), 0, 1));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("bias");
        names__.push_back("beta_first");
        names__.push_back("beta_middle");
        names__.push_back("beta_output");
        names__.push_back("predictions");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(num_layers);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_nodes);
        dims__.push_back(d);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_middle_layers);
        dims__.push_back(num_nodes);
        dims__.push_back(num_nodes);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_nodes);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nt);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "bnn_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d bias = in__.vector_constrain(num_layers);
        matrix_d beta_first = in__.matrix_constrain(num_nodes,d);
        vector<matrix_d> beta_middle;
        size_t dim_beta_middle_0__ = num_middle_layers;
        for (size_t k_0__ = 0; k_0__ < dim_beta_middle_0__; ++k_0__) {
            beta_middle.push_back(in__.matrix_constrain(num_nodes,num_nodes));
        }
        vector_d beta_output = in__.vector_constrain(num_nodes);
        for (int k_0__ = 0; k_0__ < num_layers; ++k_0__) {
            vars__.push_back(bias[k_0__]);
        }
        for (int k_1__ = 0; k_1__ < d; ++k_1__) {
            for (int k_0__ = 0; k_0__ < num_nodes; ++k_0__) {
                vars__.push_back(beta_first(k_0__, k_1__));
            }
        }
        for (int k_2__ = 0; k_2__ < num_nodes; ++k_2__) {
            for (int k_1__ = 0; k_1__ < num_nodes; ++k_1__) {
                for (int k_0__ = 0; k_0__ < num_middle_layers; ++k_0__) {
                    vars__.push_back(beta_middle[k_0__](k_1__, k_2__));
                }
            }
        }
        for (int k_0__ = 0; k_0__ < num_nodes; ++k_0__) {
            vars__.push_back(beta_output[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d predictions(Nt);
        (void) predictions;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(predictions,DUMMY_VAR__);

        try {
            {
                vector_d alpha(Nt);
                (void) alpha;  // dummy to suppress unused var warning
                stan::math::initialize(alpha, std::numeric_limits<double>::quiet_NaN());
                current_statement_begin__ = 64;
                stan::math::assign(alpha, calculate_alpha(Xt,bias,beta_first,beta_middle,beta_output, pstream__));
                current_statement_begin__ = 65;
                for (int i = 1; i <= Nt; ++i) {
                    current_statement_begin__ = 66;
                    stan::math::assign(get_base1_lhs(predictions,i,"predictions",1), inv_logit(get_base1(alpha,i,"alpha",1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < Nt; ++k_0__) {
            vars__.push_back(predictions[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "bnn_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= num_layers; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_nodes; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_first" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= num_nodes; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= num_nodes; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= num_middle_layers; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta_middle" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= num_nodes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_output" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predictions" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= num_layers; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "bias" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_1__ = 1; k_1__ <= d; ++k_1__) {
            for (int k_0__ = 1; k_0__ <= num_nodes; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_first" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        for (int k_2__ = 1; k_2__ <= num_nodes; ++k_2__) {
            for (int k_1__ = 1; k_1__ <= num_nodes; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= num_middle_layers; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta_middle" << '.' << k_0__ << '.' << k_1__ << '.' << k_2__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        for (int k_0__ = 1; k_0__ <= num_nodes; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_output" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= Nt; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "predictions" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef bnn_model_namespace::bnn_model stan_model;

