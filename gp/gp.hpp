// Code generated by Stan version 2.9

#include <stan/model/model_header.hpp>

namespace gp_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;
template <typename T0__, typename T1__, typename T2__>
inline
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
ARD(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
        const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& sigma,
        const int& D, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ toRet;
            (void) toRet;  // dummy to suppress unused var warning
            stan::math::initialize(toRet, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 7;
            stan::math::assign(toRet, 0.0);
            current_statement_begin__ = 8;
            for (int d = 1; d <= D; ++d) {
                current_statement_begin__ = 9;
                stan::math::assign(toRet, (toRet + ((0.5 * pow((get_base1(x,d,"x",1) - get_base1(z,d,"z",1)),2)) / get_base1(sigma,d,"sigma",1))));
            }
            current_statement_begin__ = 11;
            return stan::math::promote_scalar<fun_return_scalar_t__>(toRet);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ARD_functor__ {
    template <typename T0__, typename T1__, typename T2__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const Eigen::Matrix<T0__, 1,Eigen::Dynamic>& x,
        const Eigen::Matrix<T1__, 1,Eigen::Dynamic>& z,
        const Eigen::Matrix<T2__, Eigen::Dynamic,1>& sigma,
        const int& D, std::ostream* pstream__) const {
        return ARD(x, z, sigma, D, pstream__);
    }
};

template <typename T0__, typename T1__>
inline
typename boost::math::tools::promote_args<T0__, T1__>::type
BER(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& yhat,
        const int& Nt, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
    int current_statement_begin__ = -1;
    try {
        {
            fun_scalar_t__ TN;
            (void) TN;  // dummy to suppress unused var warning
            fun_scalar_t__ FN;
            (void) FN;  // dummy to suppress unused var warning
            fun_scalar_t__ TP;
            (void) TP;  // dummy to suppress unused var warning
            fun_scalar_t__ FP;
            (void) FP;  // dummy to suppress unused var warning
            fun_scalar_t__ BER;
            (void) BER;  // dummy to suppress unused var warning
            fun_scalar_t__ b1;
            (void) b1;  // dummy to suppress unused var warning
            stan::math::initialize(TN, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(FN, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(TP, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(FP, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(BER, std::numeric_limits<double>::quiet_NaN());
            stan::math::initialize(b1, std::numeric_limits<double>::quiet_NaN());
            current_statement_begin__ = 21;
            stan::math::assign(TN, 0.0);
            current_statement_begin__ = 22;
            stan::math::assign(FN, 0.0);
            current_statement_begin__ = 23;
            stan::math::assign(TP, 0.0);
            current_statement_begin__ = 24;
            stan::math::assign(FP, 0.0);
            current_statement_begin__ = 25;
            for (int i = 1; i <= Nt; ++i) {
                current_statement_begin__ = 26;
                if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),0)) && primitive_value(logical_eq(get_base1(y,i,"y",1),0))))) {
                    current_statement_begin__ = 27;
                    stan::math::assign(TN, (TN + 1.0));
                } else if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),0)) && primitive_value(logical_eq(get_base1(y,i,"y",1),1))))) {
                    current_statement_begin__ = 30;
                    stan::math::assign(FN, (FN + 1.0));
                } else if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),1)) && primitive_value(logical_eq(get_base1(y,i,"y",1),1))))) {
                    current_statement_begin__ = 33;
                    stan::math::assign(TP, (TP + 1.0));
                } else if (as_bool((primitive_value(logical_eq(round(get_base1(yhat,i,"yhat",1)),1)) && primitive_value(logical_eq(get_base1(y,i,"y",1),0))))) {
                    current_statement_begin__ = 36;
                    stan::math::assign(FP, (FP + 1.0));
                }
            }
            current_statement_begin__ = 39;
            stan::math::assign(BER, (0.5 * ((FP / (FP + TN)) + (FN / (FN + TP)))));
            current_statement_begin__ = 40;
            return stan::math::promote_scalar<fun_return_scalar_t__>(BER);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e,current_statement_begin__);
        // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct BER_functor__ {
    template <typename T0__, typename T1__>
    inline
    typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic,1>& y,
        const Eigen::Matrix<T1__, Eigen::Dynamic,1>& yhat,
        const int& Nt, std::ostream* pstream__) const {
        return BER(y, yhat, Nt, pstream__);
    }
};

class gp_model : public prob_grad {
private:
    int D;
    int N1;
    matrix_d x1;
    vector<int> z1;
    int N2;
    matrix_d x2;
    vector_d z2;
    int N;
    matrix_d x;
    vector_d mu;
public:
    gp_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        current_statement_begin__ = -1;

        static const char* function__ = "gp_model_namespace::gp_model";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N1", "int", context__.to_vec());
        N1 = int(0);
        vals_i__ = context__.vals_i("N1");
        pos__ = 0;
        N1 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "x1", "matrix_d", context__.to_vec(N1,D));
        validate_non_negative_index("x1", "N1", N1);
        validate_non_negative_index("x1", "D", D);
        x1 = matrix_d(N1,D);
        vals_r__ = context__.vals_r("x1");
        pos__ = 0;
        size_t x1_m_mat_lim__ = N1;
        size_t x1_n_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < x1_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x1_m_mat_lim__; ++m_mat__) {
                x1(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "z1", "int", context__.to_vec(N1));
        validate_non_negative_index("z1", "N1", N1);
        z1 = std::vector<int>(N1,int(0));
        vals_i__ = context__.vals_i("z1");
        pos__ = 0;
        size_t z1_limit_0__ = N1;
        for (size_t i_0__ = 0; i_0__ < z1_limit_0__; ++i_0__) {
            z1[i_0__] = vals_i__[pos__++];
        }
        context__.validate_dims("data initialization", "N2", "int", context__.to_vec());
        N2 = int(0);
        vals_i__ = context__.vals_i("N2");
        pos__ = 0;
        N2 = vals_i__[pos__++];
        context__.validate_dims("data initialization", "x2", "matrix_d", context__.to_vec(N2,D));
        validate_non_negative_index("x2", "N2", N2);
        validate_non_negative_index("x2", "D", D);
        x2 = matrix_d(N2,D);
        vals_r__ = context__.vals_r("x2");
        pos__ = 0;
        size_t x2_m_mat_lim__ = N2;
        size_t x2_n_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < x2_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < x2_m_mat_lim__; ++m_mat__) {
                x2(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("z2", "N2", N2);
        z2 = vector_d(N2);
        context__.validate_dims("data initialization", "z2", "vector_d", context__.to_vec(N2));
        vals_r__ = context__.vals_r("z2");
        pos__ = 0;
        size_t z2_i_vec_lim__ = N2;
        for (size_t i_vec__ = 0; i_vec__ < z2_i_vec_lim__; ++i_vec__) {
            z2[i_vec__] = vals_r__[pos__++];
        }

        // validate data
        check_greater_or_equal(function__,"D",D,1);
        check_greater_or_equal(function__,"N1",N1,1);
        for (int k0__ = 0; k0__ < N1; ++k0__) {
            check_greater_or_equal(function__,"z1[k0__]",z1[k0__],0);
            check_less_or_equal(function__,"z1[k0__]",z1[k0__],1);
        }
        check_greater_or_equal(function__,"N2",N2,1);
        N = int(0);
        validate_non_negative_index("x", "(N1 + N2)", (N1 + N2));
        validate_non_negative_index("x", "D", D);
        x = matrix_d((N1 + N2),D);
        validate_non_negative_index("mu", "(N1 + N2)", (N1 + N2));
        mu = vector_d((N1 + N2));

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(N,DUMMY_VAR__);
        stan::math::fill(x,DUMMY_VAR__);
        stan::math::fill(mu,DUMMY_VAR__);

        try {
            current_statement_begin__ = 57;
            stan::math::assign(N, (N1 + N2));
            current_statement_begin__ = 58;
            for (int n = 1; n <= N1; ++n) {
                current_statement_begin__ = 58;
                stan::math::assign(get_base1_lhs(x,n,"x",1), get_base1(x1,n,"x1",1));
            }
            current_statement_begin__ = 59;
            for (int n = 1; n <= N2; ++n) {
                current_statement_begin__ = 59;
                stan::math::assign(get_base1_lhs(x,(N1 + n),"x",1), get_base1(x2,n,"x2",1));
            }
            current_statement_begin__ = 60;
            for (int i = 1; i <= N; ++i) {
                current_statement_begin__ = 60;
                stan::math::assign(get_base1_lhs(mu,i,"mu",1), 0);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data
        check_greater_or_equal(function__,"N",N,1);

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += N1;
        num_params_r__ += N2;
        num_params_r__ += D;
        ++num_params_r__;
        ++num_params_r__;
    }

    ~gp_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("y1")))
            throw std::runtime_error("variable y1 missing");
        vals_r__ = context__.vals_r("y1");
        pos__ = 0U;
        context__.validate_dims("initialization", "y1", "vector_d", context__.to_vec(N1));
        vector_d y1(N1);
        for (int j1__ = 0U; j1__ < N1; ++j1__)
            y1(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(y1);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y1: ") + e.what());
        }

        if (!(context__.contains_r("y2")))
            throw std::runtime_error("variable y2 missing");
        vals_r__ = context__.vals_r("y2");
        pos__ = 0U;
        context__.validate_dims("initialization", "y2", "vector_d", context__.to_vec(N2));
        vector_d y2(N2);
        for (int j1__ = 0U; j1__ < N2; ++j1__)
            y2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(y2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable y2: ") + e.what());
        }

        if (!(context__.contains_r("rho2")))
            throw std::runtime_error("variable rho2 missing");
        vals_r__ = context__.vals_r("rho2");
        pos__ = 0U;
        context__.validate_dims("initialization", "rho2", "vector_d", context__.to_vec(D));
        vector_d rho2(D);
        for (int j1__ = 0U; j1__ < D; ++j1__)
            rho2(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,rho2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable rho2: ") + e.what());
        }

        if (!(context__.contains_r("eta2")))
            throw std::runtime_error("variable eta2 missing");
        vals_r__ = context__.vals_r("eta2");
        pos__ = 0U;
        context__.validate_dims("initialization", "eta2", "double", context__.to_vec());
        double eta2(0);
        eta2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,eta2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable eta2: ") + e.what());
        }

        if (!(context__.contains_r("sigma2")))
            throw std::runtime_error("variable sigma2 missing");
        vals_r__ = context__.vals_r("sigma2");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma2", "double", context__.to_vec());
        double sigma2(0);
        sigma2 = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sigma2);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sigma2: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  y1;
        (void) y1;   // dummy to suppress unused var warning
        if (jacobian__)
            y1 = in__.vector_constrain(N1,lp__);
        else
            y1 = in__.vector_constrain(N1);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  y2;
        (void) y2;   // dummy to suppress unused var warning
        if (jacobian__)
            y2 = in__.vector_constrain(N2,lp__);
        else
            y2 = in__.vector_constrain(N2);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  rho2;
        (void) rho2;   // dummy to suppress unused var warning
        if (jacobian__)
            rho2 = in__.vector_lb_constrain(0,D,lp__);
        else
            rho2 = in__.vector_lb_constrain(0,D);

        T__ eta2;
        (void) eta2;   // dummy to suppress unused var warning
        if (jacobian__)
            eta2 = in__.scalar_lb_constrain(0,lp__);
        else
            eta2 = in__.scalar_lb_constrain(0);

        T__ sigma2;
        (void) sigma2;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma2 = in__.scalar_lb_constrain(0,lp__);
        else
            sigma2 = in__.scalar_lb_constrain(0);


        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Sigma((N1 + N2),(N1 + N2));
        (void) Sigma;  // dummy to suppress unused var warning
        stan::math::fill(Sigma,DUMMY_VAR__);

        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(Sigma,DUMMY_VAR__);

        try {
            current_statement_begin__ = 71;
            for (int i = 1; i <= (N - 1); ++i) {
                current_statement_begin__ = 72;
                for (int j = (i + 1); j <= N; ++j) {
                    current_statement_begin__ = 73;
                    stan::math::assign(get_base1_lhs(Sigma,i,j,"Sigma",1), ((eta2 * exp(-(ARD(get_base1(x,i,"x",1),get_base1(x,j,"x",1),rho2,D, pstream__)))) + if_else(logical_eq(i,j),0.10000000000000001,0.0)));
                    current_statement_begin__ = 74;
                    stan::math::assign(get_base1_lhs(Sigma,j,i,"Sigma",1), get_base1(Sigma,i,j,"Sigma",1));
                }
            }
            current_statement_begin__ = 77;
            for (int k = 1; k <= N; ++k) {
                current_statement_begin__ = 78;
                stan::math::assign(get_base1_lhs(Sigma,k,k,"Sigma",1), (eta2 + sigma2));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < (N1 + N2); ++i0__) {
            for (int i1__ = 0; i1__ < (N1 + N2); ++i1__) {
                if (stan::math::is_uninitialized(Sigma(i0__,i1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: Sigma" << '[' << i0__ << ']' << '[' << i1__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
        }

        const char* function__ = "validate transformed params";
        (void) function__; // dummy to suppress unused var warning
        stan::math::check_cov_matrix(function__,"Sigma",Sigma);

        // model body
        try {
            {
                Eigen::Matrix<T__,Eigen::Dynamic,1>  y(N);
                (void) y;  // dummy to suppress unused var warning
                stan::math::fill(y,DUMMY_VAR__);
                stan::math::initialize(y, DUMMY_VAR__);
                current_statement_begin__ = 82;
                for (int n = 1; n <= N1; ++n) {
                    current_statement_begin__ = 82;
                    stan::math::assign(get_base1_lhs(y,n,"y",1), get_base1(y1,n,"y1",1));
                }
                current_statement_begin__ = 83;
                for (int n = 1; n <= N2; ++n) {
                    current_statement_begin__ = 83;
                    stan::math::assign(get_base1_lhs(y,(N1 + n),"y",1), get_base1(y2,n,"y2",1));
                }
                current_statement_begin__ = 85;
                lp_accum__.add(inv_gamma_log<propto__>(sigma2, 1, 1));
                current_statement_begin__ = 86;
                lp_accum__.add(inv_gamma_log<propto__>(eta2, 1, 1));
                current_statement_begin__ = 87;
                lp_accum__.add(inv_gamma_log<propto__>(rho2, 1, 1));
                current_statement_begin__ = 89;
                lp_accum__.add(multi_normal_log<propto__>(y, mu, Sigma));
                current_statement_begin__ = 90;
                for (int n = 1; n <= N1; ++n) {
                    current_statement_begin__ = 91;
                    lp_accum__.add(bernoulli_logit_log<propto__>(get_base1(z1,n,"z1",1), get_base1(y1,n,"y1",1)));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("y1");
        names__.push_back("y2");
        names__.push_back("rho2");
        names__.push_back("eta2");
        names__.push_back("sigma2");
        names__.push_back("Sigma");
        names__.push_back("pr_z_eq_1");
        names__.push_back("pr_z_eq_2");
        names__.push_back("average_error");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(N1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back((N1 + N2));
        dims__.push_back((N1 + N2));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N2);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N1);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "gp_model_namespace::write_array";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d y1 = in__.vector_constrain(N1);
        vector_d y2 = in__.vector_constrain(N2);
        vector_d rho2 = in__.vector_lb_constrain(0,D);
        double eta2 = in__.scalar_lb_constrain(0);
        double sigma2 = in__.scalar_lb_constrain(0);
        for (int k_0__ = 0; k_0__ < N1; ++k_0__) {
            vars__.push_back(y1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(y2[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(rho2[k_0__]);
        }
        vars__.push_back(eta2);
        vars__.push_back(sigma2);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        matrix_d Sigma((N1 + N2),(N1 + N2));
        (void) Sigma;  // dummy to suppress unused var warning

        try {
            current_statement_begin__ = 71;
            for (int i = 1; i <= (N - 1); ++i) {
                current_statement_begin__ = 72;
                for (int j = (i + 1); j <= N; ++j) {
                    current_statement_begin__ = 73;
                    stan::math::assign(get_base1_lhs(Sigma,i,j,"Sigma",1), ((eta2 * exp(-(ARD(get_base1(x,i,"x",1),get_base1(x,j,"x",1),rho2,D, pstream__)))) + if_else(logical_eq(i,j),0.10000000000000001,0.0)));
                    current_statement_begin__ = 74;
                    stan::math::assign(get_base1_lhs(Sigma,j,i,"Sigma",1), get_base1(Sigma,i,j,"Sigma",1));
                }
            }
            current_statement_begin__ = 77;
            for (int k = 1; k <= N; ++k) {
                current_statement_begin__ = 78;
                stan::math::assign(get_base1_lhs(Sigma,k,k,"Sigma",1), (eta2 + sigma2));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters
        stan::math::check_cov_matrix(function__,"Sigma",Sigma);

        // write transformed parameters
        for (int k_1__ = 0; k_1__ < (N1 + N2); ++k_1__) {
            for (int k_0__ = 0; k_0__ < (N1 + N2); ++k_0__) {
                vars__.push_back(Sigma(k_0__, k_1__));
            }
        }

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d pr_z_eq_1(N1);
        (void) pr_z_eq_1;  // dummy to suppress unused var warning
        vector_d pr_z_eq_2(N2);
        (void) pr_z_eq_2;  // dummy to suppress unused var warning
        double average_error(0.0);
        (void) average_error;  // dummy to suppress unused var warning
        vector_d log_lik(N1);
        (void) log_lik;  // dummy to suppress unused var warning

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning


        // initialize transformed variables to avoid seg fault on val access
        stan::math::fill(pr_z_eq_1,DUMMY_VAR__);
        stan::math::fill(pr_z_eq_2,DUMMY_VAR__);
        stan::math::fill(average_error,DUMMY_VAR__);
        stan::math::fill(log_lik,DUMMY_VAR__);

        try {
            current_statement_begin__ = 101;
            for (int n = 1; n <= N1; ++n) {
                current_statement_begin__ = 102;
                stan::math::assign(get_base1_lhs(pr_z_eq_1,n,"pr_z_eq_1",1), inv_logit(get_base1(y1,n,"y1",1)));
                current_statement_begin__ = 103;
                stan::math::assign(get_base1_lhs(log_lik,n,"log_lik",1), bernoulli_logit_log(get_base1(z1,n,"z1",1),get_base1(pr_z_eq_1,n,"pr_z_eq_1",1)));
            }
            current_statement_begin__ = 105;
            for (int n = 1; n <= N2; ++n) {
                current_statement_begin__ = 106;
                stan::math::assign(get_base1_lhs(pr_z_eq_2,n,"pr_z_eq_2",1), inv_logit(get_base1(y2,n,"y2",1)));
            }
            current_statement_begin__ = 108;
            stan::math::assign(average_error, BER(z2,pr_z_eq_2,N2, pstream__));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e,current_statement_begin__);
            // Next line prevents compiler griping about no return
throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities
        check_greater_or_equal(function__,"average_error",average_error,0);

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N1; ++k_0__) {
            vars__.push_back(pr_z_eq_1[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N2; ++k_0__) {
            vars__.push_back(pr_z_eq_2[k_0__]);
        }
        vars__.push_back(average_error);
        for (int k_0__ = 0; k_0__ < N1; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "gp_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_1__ = 1; k_1__ <= (N1 + N2); ++k_1__) {
            for (int k_0__ = 1; k_0__ <= (N1 + N2); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Sigma" << '.' << k_0__ << '.' << k_1__;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pr_z_eq_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pr_z_eq_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "average_error";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= N1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "y2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "eta2";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma2";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= ((N1 + N2) + (((N1 + N2) * ((N1 + N2) - 1)) / 2)); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "Sigma" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pr_z_eq_1" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N2; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "pr_z_eq_2" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "average_error";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef gp_model_namespace::gp_model stan_model;

